# -*- coding:UTF-8 -*-
# LIU Panfeng
# time:2020-07-19
#模块的引入和相关的初始设置
#运行环境jupyter_book
import numpy as np
import pandas as pd
from datetime import datetime,timedelta
import matplotlib as mpl
mpl.rcParams['font.sans-serif']=['SimHei'] #用来正常显示中文标签
mpl.rcParams['axes.unicode_minus']=False#用来正常显示负号
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')#关闭提醒
pd.set_option('max_colwidth', 120)#每列最大宽度
pd.set_option('display.max_columns',500)#显示的最大列数
pd.set_option('expand_frame_repr', False)#是否换行
import os
pd.set_option('display.unicode.ambiguous_as_wide', True)
pd.set_option('display.unicode.east_asian_width', True)

#对股票数据进行处理
data = pd.read_hdf('/Users/liupanfeng/我的学习/python课件/class1_ownership_data/stock_price/hdf.h5', 'mindex')
stock_fund = pd.read_excel("/Users/liupanfeng/我的学习/python课件/class1_ownership_data/stock_price/stock_basic_information.xlsx")
stock_fund['代码'] = stock_fund['证券代码'] # 导入股票板块信息
#print(stock_fund)
basic_data = pd.merge(data, stock_fund, on='代码', how='inner') # 合并板块信息
data = basic_data.copy() # 复制数据--深复制，源数据不变
data['日期'] = pd.to_datetime(data['日期'])
print(data['日期'])
d = pd.to_datetime('20080101', format = '%Y%m%d')     #设定开始时间
d_end = pd.to_datetime('20201231', format = '%Y%m%d')    #设定结束时间---这个位置的时间格式不对
data1 = data[data['日期'] > d]
data1 = data1[data1['日期'] < d_end]

#读入股指数据并和股票数据合并
m = pd.read_csv('/Users/liupanfeng/我的学习/python课件/class1_ownership_data/stock_price/hs300.csv', encoding='gbk')
m['日期'] = pd.to_datetime(m['日期'])
data_300 = pd.merge(m, data1, on='日期', how='inner', suffixes=('_m', '_r'))
base_data = pd.DataFrame()
base_data[['Stkcd', 'Reptdt', '大盘涨跌幅', '个股涨跌幅', 'turn_rate', 'stock_value', 'p_eps', 'p_equity', 'p_sale', 'p_cash', '上市板']] =\
data_300[['代码_r', '日期', '涨跌幅(%)_m', '涨跌幅(%)_r', '换手率(%)', '总市值(元)', '市盈率', '市净率', '市销率', '市现率', '上市板']]
# print(base_data[base_data['个股涨跌幅'].isnull()])#查看缺失值
base_data['个股涨跌幅'].fillna(value=0, inplace=True)   #给0的话，会影响实际回测的数据
# print(base_data)
#对于ST的情况其实也需要考虑的，涨停和跌停无法买卖，需要排除
base_data['个股涨跌幅'] = base_data['个股涨跌幅'].apply(lambda x: x if abs(x) <= 9 else 0)
data = base_data.copy()
data['pct_chg'] = data['个股涨跌幅'].fillna(value=0)
all_data = data[data['上市板'].isin(['主板'])]         #限制上市版为主板
all_data['Stkcd'] = all_data['Stkcd'].apply(lambda x: x[0:6])
all_data['Stkcd'] = all_data['Stkcd'].astype('int')
all_data['year'] = pd.to_datetime(all_data['Reptdt']).dt.year

#将文件写入csv并存入Hdf
all_data.to_csv('/Users/liupanfeng/我的学习/python课件/我的数据/all_data.csv',index=None)

#引入三大财务报表数据，并进行计算
path1 = "/Users/liupanfeng/我的学习/python课件/data_for_class2/资产负债表203926062/FS_Combas.csv"
path2 = "/Users/liupanfeng/我的学习/python课件/data_for_class2/现金流量表（直接法）205229448/FS_Comscfd.csv"
path3 = "/Users/liupanfeng/我的学习/python课件/data_for_class2/利润表204957903/FS_Comins.csv"

#资产负债表--需要总资产的数据
asset=pd.read_csv(path1)
#print(asset)
asset1=asset[asset['Typrep'].isin(['A'])]  ##“A＝合并报表”、“B＝母公司报表”
list1=['Stkcd','Accper','总资产']
list2=['Stkcd','Accper','A001000000']
new_asset=pd.DataFrame()
new_asset[list1]=asset1[list2]
#print(new_asset)
new_asset.fillna(value=0,inplace=True)

#利润表--需要营业总收入、净利润、主营业务收入、主营业务成本的数据
income=pd.read_csv(path3)
income=income[income['Typrep'].isin(['A'])]
income=income[['Stkcd','Accper','Typrep','B001100000','B002000000','B001101000','B001201000']]
income.rename(columns={'B001100000':'营业总收入','B002000000':'净利润','B001101000':'主营业务收入','B001201000':'主营业务成本'},inplace=True)
income=income.dropna()

#现金流量表--需要经营现金流净额
cash=pd.read_csv(path2)
cash=cash[cash['Typrep'].isin(['A'])]
cash=cash[['Stkcd','Accper','Typrep','C001000000']]
cash.rename(columns={'C001000000':'经营现金净额'},inplace=True)
cash.fillna(value=0)

#将三大报表数据合并
fin_data=pd.merge(pd.merge(income,cash,on=['Stkcd','Accper'],how='inner'),new_asset,on=['Stkcd','Accper'],how='inner')

#进行数据预处理，保留12月份的财务数据
fin_data['Accper']=pd.to_datetime(fin_data['Accper'])
fin_data['month']=fin_data['Accper'].dt.month
fin_data['year']=fin_data['Accper'].dt.year
fin_data=fin_data[fin_data['month'].isin([12])]

#进行指标的计算，需要注意，这里不要做任何数据的排除
#不然会导致比如某公司某些年份的数据不满足要求而被删除，从而导致比如平均总资产取值不准确
#指标1，净利润/营业总收入
fin_data['net_margin']=fin_data['净利润']/fin_data['营业总收入']

#指标2，销售毛利率，(主营业务收入-主营业务成本)/主营业务收入×100%
fin_data['gross_margin']=(fin_data['主营业务收入']-fin_data['主营业务成本'])/fin_data['主营业务收入']

#指标3，经营现金净额/主营业务收入
fin_data['noc_bi']=fin_data['经营现金净额']/fin_data['主营业务收入']

#指标4，总资产周转率=主营业务收入/总资产
fin_data['tato']=fin_data['主营业务收入']/fin_data['总资产']

#指标5，营业总收入同比增长率
#先求出上年的总资产的数据
fin_data = fin_data.sort_values(by=['Stkcd', 'Accper'])
g_fin_data = fin_data.groupby('Stkcd')
fin_data['上年总资产'] = g_fin_data['总资产'].shift(1)
#然后计算同比增长率
fin_data['grtor'] = (fin_data['总资产']-fin_data['上年总资产'])/fin_data['上年总资产']

#对数据去0处理(避免后续函数中出现无限大的值)
fin_data=fin_data[~fin_data['营业总收入'].isin([0])]
fin_data=fin_data[~fin_data['主营业务收入'].isin([0])]
fin_data=fin_data[~fin_data['总资产'].isin([0])]
fin_data=fin_data[~fin_data['上年总资产'].isin([0])]

#极值处理
from scipy.stats.mstats import winsorize
def using_mstats(s):
    return winsorize(s,limits=[0.01,0.01])
fin_data[['net_margin','gross_margin','noc_bi','tato','grtor']]=fin_data[['net_margin','gross_margin','noc_bi','tato','grtor']].apply(using_mstats,axis=0)
fin_data = fin_data.dropna()

#多因子的处理
fin_data['factor'] = (0.3*fin_data['net_margin']+0.4*fin_data['gross_margin']+0.01*fin_data['noc_bi']+0.09*fin_data['tato']+0.2*fin_data['grtor'])

#对每个因子进行分级处理
def Group_by_var(data,vars):
    '''
    :param data: input data
    :param vars: input vars
    :return: output data
    '''
    data['按年分级']=data.groupby(by=['year'])[[vars]].transform(lambda x:pd.cut(x,10,labels=list('0123456789')))
    data=data.sort_values(by=['Stkcd','Accper'])
    g_data=data.groupby('Stkcd')
    y_vars1=vars+'_fjYear'
    data[y_vars1]=data.groupby('Stkcd')['按年分级'].shift(1)
    data[vars]=g_data[vars].shift(1)
    data=data.dropna()
    data=data[['Stkcd','Accper','year',vars,y_vars1]]
    return data
data=fin_data.copy()
df1=Group_by_var(data,'net_margin')
df2=Group_by_var(data,'gross_margin')
df3=Group_by_var(data,'noc_bi')
df4=Group_by_var(data,'tato')
df5=Group_by_var(data,'grtor')
df6=Group_by_var(data,'factor')
list_x=['net_margin','gross_margin','noc_bi','tato','grtor','factor']
df_list=[]
for x in list_x:
    data_lev=Group_by_var(data,x)
    df_list.append(data_lev)
data_lev=pd.concat(df_list,axis=1)
data_lev2=data_lev.iloc[:,~data_lev.columns.duplicated()]
f1 = data_lev2.copy()

all_data=pd.read_csv('/Users/liupanfeng/我的学习/python课件/我的数据/all_data.csv')

#看下之前的Reptdt_y怎么来的，是不是默认出来的
data_lev_all = pd.merge(f1, all_data, on=['Stkcd', 'year'], how='inner',suffixes=('_x', '_y'))
#将最后的数据写入csv，股票数据和因子数据已经具备了
data_lev_all.to_csv('/Users/liupanfeng/我的学习/python课件/我的数据/data_lev_all.csv',index=None)
data_lev_all = pd.read_csv('/Users/liupanfeng/我的学习/python课件/我的数据/data_lev_all.csv')

#这段限制多因子的话直接用，单因子的话需要根据不同的因子限制不同的值
data_lev_all = data_lev_all[data_lev_all['gross_margin']>0.5]####对参数值得选取--重点
data_lev_all = data_lev_all[data_lev_all['net_margin']>0.2]
data_lev_all = data_lev_all[data_lev_all['grtor']>0.3]


# data_lev_all.to_csv('/Users/liupanfeng/我的学习/python课件/我的数据/data_lev_all.csv',index=None)

#第二种方式---和下边的方式并行，不可同时运行
# #逆序排列。值越大，rank越小。
# data_lev_all = pd.read_csv('/Users/liupanfeng/我的学习/python课件/我的数据/data_lev_all.csv')
# #重点
# data_lev_all = data_lev_all[data_lev_all['gross_margin']>0.5]####对参数值得选取--重点
# data_lev_all = data_lev_all[data_lev_all['net_margin']>0.2]
# data_lev_all = data_lev_all[data_lev_all['grtor']>0.3]

# data_lev_all['factor_rank'] =data_lev_all.groupby('Reptdt')['factor'].rank()####日期这里groupby需要使用reptdt
# data_lev_all=data_lev_all[['Stkcd','Accper','factor','factor_rank','Reptdt','大盘涨跌幅','个股涨跌幅','stock_value']]
# data_lev_all.head(10)
# # data_lev_all = data_lev_all[data_lev_all['factor_rank'] <= 10]
# data_lev_all.to_csv('/Users/liupanfeng/我的学习/python课件/我的数据/333.csv',index=None)
# data_lev_all.head(10)

# equity1=pd.DataFrame()
# equity1['大盘涨跌幅m'] = data_lev_all.groupby('Reptdt')['大盘涨跌幅'].mean()
# equity1['涨跌幅m'] = data_lev_all.groupby('Reptdt')['个股涨跌幅'].mean()
# equity1=equity1.reset_index()
# equity1['equity_curve'] = (equity1['涨跌幅m']/100 + 1.).cumprod()
# equity1['benchmark'] = (equity1['大盘涨跌幅m']/100 + 1.).cumprod()
# equity1.set_index('Reptdt', inplace=True)
# plt.plot(equity1['equity_curve'])
# plt.show()

lev_all_soe = data_lev_all.groupby(['Reptdt', 'factor_fjYear'])
get_average_msoe = lambda g: np.average(g['大盘涨跌幅'], weights=g['stock_value'])
lev_all_soe = data_lev_all.groupby(['Reptdt', 'factor_fjYear'])
result_cut_msoe = lev_all_soe.apply(get_average_msoe)
result_cut_msoe = result_cut_msoe.reset_index()
get_average_soe = lambda g: np.average(g['个股涨跌幅'], weights=g['stock_value'])
result_cut_soe = lev_all_soe.apply(get_average_soe) # unstack可以将多层索引的结果转换成单层的dataframe
result_cut_soe = result_cut_soe.reset_index()
result_lev_soe = pd.merge(result_cut_soe, result_cut_msoe, on=['Reptdt', 'factor_fjYear'], how='inner')
# 根据毛利率性质，soe按照日期求每天不同股票的涨跌幅均值
final_lev_soe = result_lev_soe.copy()
final_lev_soe['market_return'] = (result_lev_soe['0_y'] / 100 + 1.0)
final_lev_soe['stock_return'] = (result_lev_soe['0_x'] / 100 + 1.0)
# 分组求累积
final_lev_soe['equity_curve'] = final_lev_soe.groupby('factor_fjYear')['stock_return'].cumprod()
final_lev_soe['benchmark'] = final_lev_soe.groupby('factor_fjYear')['market_return'].cumprod()

final_lev_soe.to_csv('/Users/liupanfeng/我的学习/python课件/我的数据/111.csv',index=None)
df = pd.read_csv('/Users/liupanfeng/我的学习/python课件/我的数据/111.csv')
df1=df[df['factor_fjYear']==0]###有时候第0组不一定有数据，需要往后取
x1 = df1[['Reptdt']]
y1 = df1[['equity_curve']]###和指数在一起的单独处理
y2 = df1[['benchmark']]
x1 = pd.to_datetime(x1['Reptdt'])#关键
# plt.xlim(x.min(),x.max())
# plt.ylim(y2.min(),y2.max())

# 设置横轴标签
##设置横坐标为年份，主刻度---关键代码
fig,ax=plt.subplots(1,1,figsize=(20,10),dpi=80)
year=mpl.dates.YearLocator()
interval=mpl.dates.MonthLocator(interval=12)
ax.xaxis.set_major_locator(year)
ax.xaxis.set_minor_locator(interval)
##下边两行代码如果放在上边的设置横轴标签前边效果会不一样
plt.xlabel("year",fontsize=20)
# 设置纵轴标签
plt.ylabel("earning",fontsize=20)
plt.tick_params(labelsize=20)##设置了横坐标为时间的大小
                    
# # 设置横轴精准刻度
# plt.xticks([-1, -0.5, 0, 5, 5.5])
# # 设置横轴精准刻度
# plt.xticks([-6, -5, 5, 6],
#            ["-6m", "-5m", "-3m", "-2m"])
#设置刻度字体的大小
plt.xticks(fontsize=30)#X轴的刻度没变
plt.yticks(fontsize=20)
plt.plot(x1,y1,label='factor')       ###需要修改
plt.plot(x1,y2,color='r',label='benchmark')


plt.legend(loc='best',fontsize=20)
plt.title('tato',fontsize=20)
plt.savefig('/Users/liupanfeng/我的学习/python课件/我的数据/factor1.jpg',format='jpg')

# 累计收益率和年化收益率
total_ret=df1['benchmark'].iloc[-1]-1
tr=pd.DataFrame(total_ret,index=['indicator'],columns=['total_ret'])
total_ret

###年化收益率,假设一年以250交易日计算
annual_ret=pow(1+total_ret,250/len(df1))-1
ar=pd.DataFrame(annual_ret,index=['indicator'],columns=['年化收益'])
annual_ret

#最大回撤定义成函数，减少重复工作
def max_drawdown(df):
    md=((df.cummax()-df)/df.cummax()).max()
    return round(md,4)
max_drawdown=max_drawdown(df1['benchmark'])
MD=pd.DataFrame(max_drawdown,index=['indicator'],columns=['最大回撤'])
MD
